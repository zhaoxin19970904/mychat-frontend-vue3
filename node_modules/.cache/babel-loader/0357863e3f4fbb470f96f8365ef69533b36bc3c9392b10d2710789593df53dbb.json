{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive } from 'vue';\nimport axios from 'axios';\nimport { useRouter } from 'vue-router';\nexport default {\n  __name: 'loginForm',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const formState = reactive({\n      username: '',\n      password: '',\n      remember: true\n    });\n    const onFinish = async values => {\n      try {\n        const response = await axios.post('http://localhost:8000/submit', values);\n        const token = response.data.token; // 假设后端返回的格式是 { token: '...' }\n        localStorage.setItem('token', token); // 存储 token\n\n        // 以下是假设你能直接从响应中获取用户类型\n        // 实际上，你可能需要从 JWT 解码获取用户类型\n        const decoded = jwt.decode(token); // 使用 jwt-decode 或其他库解码 token\n        localStorage.setItem('userType', decoded.role); // 假设用户类型存储在 token 的 role 字段中\n\n        if (decoded.role === 'admin') {\n          router.push('/adminpage');\n        } else {\n          alert('No permission');\n          history.go(-1); // 或 router.push('/some-other-route');\n        }\n      } catch (error) {\n        console.error('Error submitting form', error.response || error);\n        alert('Login failed');\n      }\n    };\n    const __returned__ = {\n      router,\n      formState,\n      onFinish,\n      reactive,\n      get axios() {\n        return axios;\n      },\n      get useRouter() {\n        return useRouter;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["reactive","axios","useRouter","router","formState","username","password","remember","onFinish","values","response","post","token","data","localStorage","setItem","decoded","jwt","decode","role","push","alert","history","go","error","console"],"sources":["C:/Users/bobxi/OneDrive/Desktop/Ecloud/tut8/my-vue-app/src/components/loginForm.vue"],"sourcesContent":["<template>\r\n  <h1>Welcome Chat</h1>\r\n  <a-form\r\n    :model=\"formState\"\r\n    name=\"basic\"\r\n    :label-col=\"{ span: 8 }\"\r\n    :wrapper-col=\"{ span: 16 }\"\r\n    autocomplete=\"off\"\r\n    @finish=\"onFinish\"\r\n    @finishFailed=\"onFinishFailed\"\r\n  >\r\n    <a-form-item\r\n      label=\"Username\"\r\n      name=\"username\"\r\n      :rules=\"[{ required: true, message: 'Please input your username!' }]\"\r\n    >\r\n      <a-input v-model:value=\"formState.username\" />\r\n    </a-form-item>\r\n\r\n    <a-form-item\r\n      label=\"Password\"\r\n      name=\"password\"\r\n      :rules=\"[{ required: true, message: 'Please input your password!' }]\"\r\n    >\r\n      <a-input-password v-model:value=\"formState.password\" />\r\n    </a-form-item>\r\n\r\n    <a-form-item name=\"remember\" :wrapper-col=\"{ offset: 8, span: 16 }\">\r\n      <a-checkbox v-model:checked=\"formState.remember\">Remember me</a-checkbox>\r\n    </a-form-item>\r\n\r\n    <a-form-item :wrapper-col=\"{ offset: 8, span: 16 }\">\r\n      <a-button type=\"primary\" html-type=\"submit\">Submit</a-button>\r\n    </a-form-item>\r\n  </a-form>\r\n</template>\r\n<script setup>\r\nimport { reactive } from 'vue';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router';\r\nconst router = useRouter();\r\nconst formState = reactive({\r\n  username: '',\r\n  password: '',\r\n  remember: true,\r\n});\r\nconst onFinish = async values => {\r\n  try {\r\n    const response = await axios.post('http://localhost:8000/submit', values);\r\n    const token = response.data.token; // 假设后端返回的格式是 { token: '...' }\r\n    localStorage.setItem('token', token); // 存储 token\r\n    \r\n    // 以下是假设你能直接从响应中获取用户类型\r\n    // 实际上，你可能需要从 JWT 解码获取用户类型\r\n    const decoded = jwt.decode(token); // 使用 jwt-decode 或其他库解码 token\r\n    localStorage.setItem('userType', decoded.role); // 假设用户类型存储在 token 的 role 字段中\r\n    \r\n    if (decoded.role === 'admin') {\r\n      router.push('/adminpage');\r\n    } else {\r\n      alert('No permission');\r\n      history.go(-1); // 或 router.push('/some-other-route');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error submitting form', error.response || error);\r\n    alert('Login failed');\r\n  }\r\n};\r\n</script>\r\n  "],"mappings":";AAqCA,SAASA,QAAQ,QAAQ,KAAK;AAC9B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;;;;;;;IACtC,MAAMC,MAAM,GAAGD,SAAS,CAAC,CAAC;IAC1B,MAAME,SAAS,GAAGJ,QAAQ,CAAC;MACzBK,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC,CAAC;IACF,MAAMC,QAAQ,GAAG,MAAMC,MAAM,IAAI;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,8BAA8B,EAAEF,MAAM,CAAC;QACzE,MAAMG,KAAK,GAAGF,QAAQ,CAACG,IAAI,CAACD,KAAK,CAAC,CAAC;QACnCE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC,CAAC,CAAC;;QAEtC;QACA;QACA,MAAMI,OAAO,GAAGC,GAAG,CAACC,MAAM,CAACN,KAAK,CAAC,CAAC,CAAC;QACnCE,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,OAAO,CAACG,IAAI,CAAC,CAAC,CAAC;;QAEhD,IAAIH,OAAO,CAACG,IAAI,KAAK,OAAO,EAAE;UAC5BhB,MAAM,CAACiB,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC,MAAM;UACLC,KAAK,CAAC,eAAe,CAAC;UACtBC,OAAO,CAACC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClB;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACd,QAAQ,IAAIc,KAAK,CAAC;QAC/DH,KAAK,CAAC,cAAc,CAAC;MACvB;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}