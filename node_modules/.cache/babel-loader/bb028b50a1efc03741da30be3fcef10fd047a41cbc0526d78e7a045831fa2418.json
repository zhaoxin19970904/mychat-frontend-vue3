{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive } from 'vue';\nimport axios from 'axios';\n\n// 使用 ref 创建响应式变量\n\nexport default {\n  __name: 'ChatPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const newMessage = ref('');\n    const messages = reactive([]); // 用于存储聊天历史的数组\n\n    // 定义发送消息的方法\n    const send = () => {\n      if (newMessage.value.trim() !== '') {\n        const currentTime = new Date().toLocaleTimeString();\n        const textform = `your_name: (${currentTime}) \\n ${newMessage.value}`;\n        messages.value.push(textform);\n        newMessage.value = ''; // 重置新消息输入框\n      }\n    };\n    const __returned__ = {\n      newMessage,\n      messages,\n      send,\n      ref,\n      reactive,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","axios","newMessage","messages","send","value","trim","currentTime","Date","toLocaleTimeString","textform","push"],"sources":["C:/Users/bobxi/OneDrive/Desktop/Ecloud/tut8/my-vue-app/src/components/ChatPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"chat-container\">\r\n      <div class=\"chat-history\">\r\n        <div v-for=\"(msg, index) in messages\" :key=\"index\" class=\"chat-message\">\r\n          {{ msg }}\r\n        </div>\r\n      </div>\r\n      <div class=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          v-model=\"newMessage\"\r\n          @keyup.enter=\"send\"\r\n          placeholder=\"text message...\"\r\n        />\r\n        <button @click=\"send\">Send</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, reactive } from 'vue';\r\n  import axios from 'axios';\r\n\r\n// 使用 ref 创建响应式变量\r\nconst newMessage = ref('');\r\nconst messages = reactive([]); // 用于存储聊天历史的数组\r\n\r\n// 定义发送消息的方法\r\nconst send = () => {\r\n  if (newMessage.value.trim() !== '') {\r\n    const currentTime = new Date().toLocaleTimeString();\r\n    const textform = `your_name: (${currentTime}) \\n ${newMessage.value}`;\r\n    messages.value.push(textform); \r\n\r\n    newMessage.value = ''; // 重置新消息输入框\r\n  }\r\n};\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .chat-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    height: 400px;\r\n    border: 1px solid #ccc;\r\n  }\r\n  \r\n  .chat-history {\r\n    flex-grow: 1;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .chat-message {\r\n    margin-bottom: 10px;\r\n    padding: 5px;\r\n    background-color: #f3f3f3;\r\n  }\r\n  \r\n  .chat-input {\r\n    display: flex;\r\n    padding-top: 10px;\r\n  }\r\n  \r\n  input[type=\"text\"] {\r\n    flex-grow: 1;\r\n    margin-right: 10px;\r\n    padding: 10px;\r\n  }\r\n  \r\n  button {\r\n    padding: 10px 20px;\r\n  }\r\n\r\n  .chat-history {\r\n  /* 应用 CSS 以保持文本格式，包括换行 */\r\n  white-space: pre-wrap;\r\n}\r\n.chat-message pre {\r\n  white-space: pre-wrap; /* 保留空白符和格式 */\r\n  word-wrap: break-word; /* 防止内容溢出 */\r\n  margin: 0; /* 调整 pre 元素的默认外边距 */\r\n}\r\n/* 其他样式可以根据需要调整 */\r\n  </style>"],"mappings":";AAoBE,SAASA,GAAG,EAAEC,QAAQ,QAAQ,KAAK;AACnC,OAAOC,KAAK,MAAM,OAAO;;AAE3B;;;;;;;;IACA,MAAMC,UAAU,GAAGH,GAAG,CAAC,EAAE,CAAC;IAC1B,MAAMI,QAAQ,GAAGH,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;IAE/B;IACA,MAAMI,IAAI,GAAGA,CAAA,KAAM;MACjB,IAAIF,UAAU,CAACG,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAClC,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;QACnD,MAAMC,QAAQ,GAAI,eAAcH,WAAY,QAAOL,UAAU,CAACG,KAAM,EAAC;QACrEF,QAAQ,CAACE,KAAK,CAACM,IAAI,CAACD,QAAQ,CAAC;QAE7BR,UAAU,CAACG,KAAK,GAAG,EAAE,CAAC,CAAC;MACzB;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}