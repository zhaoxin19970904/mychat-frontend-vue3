{"ast":null,"code":"import { ref, onMounted } from 'vue';\nexport default {\n  setup() {\n    const dataSource = ref([]);\n    const columns = ref([{\n      title: '姓名',\n      dataIndex: 'name',\n      key: 'name'\n    }, {\n      title: '年龄',\n      dataIndex: 'age',\n      key: 'age'\n    }, {\n      title: '住址',\n      dataIndex: 'address',\n      key: 'address'\n    }]);\n\n    // 模拟异步获取数据\n    const fetchData = async () => {\n      try {\n        // 使用 fetch API 获取数据\n        const response = await fetch('http://localhost:8000/users');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n\n        // 假设返回的 data 已经是期望的格式\n        dataSource.value = data.map((item, index) => ({\n          key: String(index + 1),\n          ...item\n        }));\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n      }\n    };\n\n    // 组件挂载时获取数据\n    onMounted(() => {\n      fetchData();\n    });\n    return {\n      dataSource,\n      columns\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","setup","dataSource","columns","title","dataIndex","key","fetchData","response","fetch","ok","Error","data","json","value","map","item","index","String","error","console"],"sources":["C:\\Users\\bobxi\\OneDrive\\Desktop\\Ecloud\\tut8\\my-vue-app\\src\\components\\AdminList.vue"],"sourcesContent":["<template>\r\n    <a-table :dataSource=\"dataSource\" :columns=\"columns\" />\r\n  </template>\r\n\r\n  <script>\r\n    import { ref, onMounted } from 'vue';\r\n\r\nexport default {\r\n  setup() {\r\n    const dataSource = ref([]);\r\n    const columns = ref([\r\n      {\r\n        title: '姓名',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n      },\r\n      {\r\n        title: '年龄',\r\n        dataIndex: 'age',\r\n        key: 'age',\r\n      },\r\n      {\r\n        title: '住址',\r\n        dataIndex: 'address',\r\n        key: 'address',\r\n      },\r\n    ]);\r\n\r\n    // 模拟异步获取数据\r\n    const fetchData = async () => {\r\n      try {\r\n        // 使用 fetch API 获取数据\r\n        const response = await fetch('http://localhost:8000/users');\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n\r\n        // 假设返回的 data 已经是期望的格式\r\n        dataSource.value = data.map((item, index) => ({\r\n          key: String(index + 1),\r\n          ...item\r\n        }));\r\n      } catch (error) {\r\n        console.error('Failed to fetch data:', error);\r\n      }\r\n    };\r\n\r\n    // 组件挂载时获取数据\r\n    onMounted(() => {\r\n      fetchData();\r\n    });\r\n\r\n    return {\r\n      dataSource,\r\n      columns,\r\n    };\r\n  },\r\n};\r\n  </script>"],"mappings":"AAKI,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AAExC,eAAe;EACbC,KAAKA,CAAA,EAAG;IACN,MAAMC,UAAS,GAAIH,GAAG,CAAC,EAAE,CAAC;IAC1B,MAAMI,OAAM,GAAIJ,GAAG,CAAC,CAClB;MACEK,KAAK,EAAE,IAAI;MACXC,SAAS,EAAE,MAAM;MACjBC,GAAG,EAAE;IACP,CAAC,EACD;MACEF,KAAK,EAAE,IAAI;MACXC,SAAS,EAAE,KAAK;MAChBC,GAAG,EAAE;IACP,CAAC,EACD;MACEF,KAAK,EAAE,IAAI;MACXC,SAAS,EAAE,SAAS;MACpBC,GAAG,EAAE;IACP,CAAC,CACF,CAAC;;IAEF;IACA,MAAMC,SAAQ,GAAI,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,6BAA6B,CAAC;QAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMC,IAAG,GAAI,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;QAElC;QACAX,UAAU,CAACY,KAAI,GAAIF,IAAI,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;UAC5CX,GAAG,EAAEY,MAAM,CAACD,KAAI,GAAI,CAAC,CAAC;UACtB,GAAGD;QACL,CAAC,CAAC,CAAC;MACL,EAAE,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;;IAED;IACAnB,SAAS,CAAC,MAAM;MACdO,SAAS,CAAC,CAAC;IACb,CAAC,CAAC;IAEF,OAAO;MACLL,UAAU;MACVC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}