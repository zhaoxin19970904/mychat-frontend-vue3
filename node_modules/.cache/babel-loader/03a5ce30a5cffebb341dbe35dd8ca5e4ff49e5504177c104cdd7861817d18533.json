{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport loginForm from '../components/loginForm.vue';\nimport AdminPage from '../components/AdminPage.vue';\nimport ClientList from '../components/ClientList.vue';\nimport AdminList from '../components/AdminList';\nimport AddUser from '../components/AddUser';\nimport EditUser from '../components/EditUser';\nimport ChatPage from '../components/ChatPage';\nimport { jwtDecode } from 'jwt-decode';\nconst routes = [{\n  path: '/',\n  name: 'Login',\n  component: loginForm\n}, {\n  path: '/adminpage',\n  name: 'AdminPage',\n  component: AdminPage,\n  meta: {\n    requiresAdmin: true\n  },\n  children: [{\n    path: 'adminlist',\n    component: AdminList\n  }, {\n    path: 'clientlist',\n    component: ClientList\n  }]\n}, {\n  path: '/adduser',\n  name: 'adduser',\n  component: AddUser,\n  meta: {\n    requiresAdmin: true\n  }\n}, {\n  path: '/edit/:id',\n  name: 'edit',\n  component: EditUser\n}, {\n  path: '/chat',\n  name: 'chat',\n  component: ChatPage\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAdmin)) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return next('/');\n    }\n    try {\n      const decoded = jwtDecode(token);\n      if (decoded.role === 'admin') {\n        next();\n      } else {\n        alert('No permission');\n        next(from.path);\n      }\n    } catch (error) {\n      console.error('Token decoding failed:', error);\n      next('/');\n    }\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","loginForm","AdminPage","ClientList","AdminList","AddUser","EditUser","ChatPage","jwtDecode","routes","path","name","component","meta","requiresAdmin","children","router","history","beforeEach","to","from","next","matched","some","record","token","localStorage","getItem","decoded","role","alert","error","console"],"sources":["C:/Users/bobxi/OneDrive/Desktop/Ecloud/tut8/my-vue-app/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\r\nimport loginForm from '../components/loginForm.vue'\r\nimport AdminPage from '../components/AdminPage.vue'\r\nimport ClientList from '../components/ClientList.vue'\r\nimport AdminList from '../components/AdminList'\r\nimport AddUser from '../components/AddUser'\r\nimport EditUser from '../components/EditUser'\r\nimport ChatPage from '../components/ChatPage'\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    name: 'Login',\r\n    component: loginForm\r\n  },\r\n  {\r\n    path: '/adminpage',\r\n    name: 'AdminPage',\r\n    component: AdminPage,\r\n    meta: { requiresAdmin: true },\r\n    children: [\r\n        {\r\n          path: 'adminlist', \r\n          component: AdminList\r\n        },\r\n        {\r\n          path: 'clientlist',\r\n          component: ClientList\r\n        }\r\n    ]\r\n  },\r\n  {\r\n    path: '/adduser',\r\n    name: 'adduser',\r\n    component: AddUser,\r\n    meta:{requiresAdmin:true},\r\n  },\r\n  {\r\n    path: '/edit/:id',\r\n    name: 'edit',\r\n    component:EditUser,\r\n  },\r\n  {\r\n    path: '/chat',\r\n    name: 'chat',\r\n    component:ChatPage,\r\n  }\r\n  \r\n]\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(),\r\n  routes\r\n})\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n\r\n    if (to.matched.some(record => record.meta.requiresAdmin)) {\r\n      const token = localStorage.getItem('token');\r\n\r\n      if (!token) {\r\n        return next('/');\r\n      }\r\n  \r\n      try {\r\n\r\n        const decoded = jwtDecode(token);\r\n        if (decoded.role === 'admin') {\r\n          next();\r\n        } else {\r\n          alert('No permission'); \r\n          next(from.path); \r\n        }\r\n      } catch (error) {\r\n        console.error('Token decoding failed:', error);\r\n        next('/'); \r\n      }\r\n    } else {\r\n      next(); \r\n    }\r\n  });\r\n\r\nexport default router"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,UAAU,MAAM,8BAA8B;AACrD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,SAAS,QAAQ,YAAY;AAEtC,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEX;AACb,CAAC,EACD;EACES,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEV,SAAS;EACpBW,IAAI,EAAE;IAAEC,aAAa,EAAE;EAAK,CAAC;EAC7BC,QAAQ,EAAE,CACN;IACEL,IAAI,EAAE,WAAW;IACjBE,SAAS,EAAER;EACb,CAAC,EACD;IACEM,IAAI,EAAE,YAAY;IAClBE,SAAS,EAAET;EACb,CAAC;AAEP,CAAC,EACD;EACEO,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEP,OAAO;EAClBQ,IAAI,EAAC;IAACC,aAAa,EAAC;EAAI;AAC1B,CAAC,EACD;EACEJ,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,MAAM;EACZC,SAAS,EAACN;AACZ,CAAC,EACD;EACEI,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZC,SAAS,EAACL;AACZ,CAAC,CAEF;AAED,MAAMS,MAAM,GAAGjB,YAAY,CAAC;EAC1BkB,OAAO,EAAEjB,gBAAgB,CAAC,CAAC;EAC3BS;AACF,CAAC,CAAC;AAEFO,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAElC,IAAIF,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACX,IAAI,CAACC,aAAa,CAAC,EAAE;IACxD,MAAMW,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAI,CAACF,KAAK,EAAE;MACV,OAAOJ,IAAI,CAAC,GAAG,CAAC;IAClB;IAEA,IAAI;MAEF,MAAMO,OAAO,GAAGpB,SAAS,CAACiB,KAAK,CAAC;MAChC,IAAIG,OAAO,CAACC,IAAI,KAAK,OAAO,EAAE;QAC5BR,IAAI,CAAC,CAAC;MACR,CAAC,MAAM;QACLS,KAAK,CAAC,eAAe,CAAC;QACtBT,IAAI,CAACD,IAAI,CAACV,IAAI,CAAC;MACjB;IACF,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CV,IAAI,CAAC,GAAG,CAAC;IACX;EACF,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEJ,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}